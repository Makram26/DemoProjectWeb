{"version":3,"sources":["serviceWorker.js","components/App.js","api/crud.js","api/index.js","components/Content.js","components/Header.js","components/Main/useCode.js","components/Main/style.js","components/Main/Main.js","components/Sidebar.js","components/Label.js","components/Tree.js","index.js"],"names":["Boolean","window","location","hostname","match","BodyStyle","createGlobalStyle","App","_ref","baseUrl","appName","apiVersion","React","createElement","Fragment","CssReset","Header","Content","get","async","fetch","endpoint","method","credentials","headers","Accept","json","setOrgUnitCode","data","body","JSON","stringify","put","orgUnit","id","status","Container","styled","section","setOrgUnit","useState","getData","response","orgUnitId","console","error","message","getOrgUnit","Sidebar","onSelect","Main","StickyHeaderBar","HeaderBar","DataProvider","types","INPUT","RESET","SUBMIT","UPDATE","DEFAULT","VALID","ERROR","reducer","state","action","type","code","resetDisabled","originalCode","submitDisabled","includes","LOADING","success","main","StyledCard","Card","ButtonContainer","ButtonStrip","dispatch","useReducer","useCode","name","InputField","label","onChange","event","target","value","valid","loading","disabled","end","Button","onClick","onReset","destructive","primary","aside","Title","h1","Tree","StyledSpan","span","checked","css","theme","secondary600","Label","_ref2","selected","CenteredLoader","CircularLoader","Element","displayName","children","initialOpen","open","setOpen","toggle","Node","onOpen","onClose","component","map","c","key","roots","setRoots","setSelected","useEffect","orgUnits","rootIds","organisationUnits","ou","allOrgUnits","filter","some","r","path","tree","forEach","root","setChildren","parent","getOrgUnitTree","init","_ref3","rootElement","document","getElementById","render","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","manifest","activities","dhis","href","productionRender"],"mappings":"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","file":"static/js/main.36457e22.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { number, string } from 'prop-types'\nimport { createGlobalStyle } from 'styled-components'\nimport { CssReset } from '@dhis2/ui-core'\nimport { Header, Content } from '.'\nimport 'typeface-roboto'\n\nconst BodyStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        background-color: rgba(0,0,10,.05);\n    }\n`\n\nexport const App = ({ baseUrl, appName, apiVersion }) => (\n    <>\n        <BodyStyle />\n        <CssReset />\n        <Header baseUrl={baseUrl} appName={appName} apiVersion={apiVersion} />\n        <Content />\n    </>\n)\n\nApp.propTypes = {\n    baseUrl: string.isRequired,\n    appName: string.isRequired,\n    apiVersion: number.isRequired,\n}\n","let baseUrl = ''\n\n/**\n * Sets the base URL.\n * @param {String} url\n */\nexport const setBaseUrl = url => (baseUrl = `${url}/`)\n\n/**\n * @param {String} endpoint\n * @returns Server response.\n */\nexport const get = async endpoint =>\n    await (await fetch(baseUrl + endpoint, {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n            Accept: 'application/json',\n        },\n    })).json()\n\n/**\n * Puts data.\n * @param {String} endpoint\n * @param {Object} data\n * @returns Server response.\n */\nexport const put = async (endpoint, data) =>\n    await (await fetch(baseUrl + endpoint, {\n        method: 'PUT',\n        credentials: 'include',\n        body: JSON.stringify(data),\n        headers: {\n            Accept: 'application/json',\n            'Content-type': 'application/json',\n        },\n    })).json()\n","import { get, put } from './crud'\n\nexport { setBaseUrl } from './crud'\n\nexport const getOrgUnitTree = async () => {\n    const me = await get('me?fields=organisationUnits')\n    const rootIds = me.organisationUnits.map(ou => ou.id)\n\n    const response = await get(\n        'organisationUnits?paging=false&fields=id,displayName,path,children'\n    )\n    const allOrgUnits = response.organisationUnits.filter(ou =>\n        rootIds.some(r => ou.path.includes(r))\n    )\n\n    const tree = allOrgUnits.filter(ou => rootIds.some(r => ou.id === r))\n\n    tree.forEach(root => {\n        const setChildren = parent => {\n            parent.children = allOrgUnits.filter(ou =>\n                parent.children.some(c => c.id === ou.id)\n            )\n            parent.children.forEach(c => setChildren(c))\n        }\n        setChildren(root)\n    })\n\n    return tree\n}\n\nexport const getOrgUnit = async orgUnitId => {\n    const response = await get(`organisationUnits/${orgUnitId}?paging=false`)\n\n    if (response.status === 'ERROR') {\n        console.error(response.message)\n        return\n    }\n\n    return response\n}\n\nexport const setOrgUnitCode = async orgUnit => {\n    const response = await put(`organisationUnits/${orgUnit.id}`, orgUnit)\n    return response.status === 'OK'\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Sidebar, Main } from '.'\nimport { getOrgUnit } from '../api'\n\nconst Container = styled.section`\n    display: flex;\n    margin-top: 48px;\n    min-height: calc(100vh - 48px);\n`\n\nexport const Content = () => {\n    const [orgUnit, setOrgUnit] = useState(null)\n\n    const getData = async id => setOrgUnit(await getOrgUnit(id))\n\n    const onSelect = id => getData(id)\n\n    return (\n        <Container>\n            <Sidebar onSelect={onSelect} />\n            {orgUnit && <Main orgUnit={orgUnit} />}\n        </Container>\n    )\n}\n","import React from 'react'\nimport { number, string } from 'prop-types'\nimport styled from 'styled-components'\nimport { DataProvider } from '@dhis2/app-runtime'\nimport { HeaderBar } from '@dhis2/ui-widgets'\n\nconst StickyHeaderBar = styled(HeaderBar)`\n    position: fixed;\n    width: 100%;\n    z-index: 1000;\n    top: 0;\n`\n\nexport const Header = ({ baseUrl, appName, apiVersion }) => (\n    <DataProvider baseUrl={baseUrl} apiVersion={apiVersion}>\n        <StickyHeaderBar appName={appName} />\n    </DataProvider>\n)\n\nHeader.propTypes = {\n    baseUrl: string.isRequired,\n    appName: string.isRequired,\n    apiVersion: number.isRequired,\n}\n","import { useReducer } from 'react'\n\nconst types = {\n    INPUT: 0,\n    RESET: 1,\n    SUBMIT: 2,\n    UPDATE: 3,\n}\n\nconst status = {\n    DEFAULT: 0,\n    VALID: 1,\n    ERROR: 2,\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case types.INPUT: {\n            return {\n                ...state,\n                code: action.code,\n                resetDisabled: action.code === state.originalCode,\n                submitDisabled: ['', state.originalCode].includes(action.code),\n                status: status.DEFAULT,\n            }\n        }\n        case types.RESET: {\n            return {\n                ...state,\n                code: state.originalCode,\n                resetDisabled: true,\n                submitDisabled: true,\n                status: status.DEFAULT,\n            }\n        }\n        case types.SUBMIT: {\n            return {\n                ...state,\n                resetDisabled: true,\n                submitDisabled: true,\n                status: status.LOADING,\n            }\n        }\n        case types.UPDATE: {\n            const success = action.status === status.VALID\n            return {\n                ...state,\n                status: action.status,\n                originalCode: success ? state.code : state.originalCode,\n                resetDisabled: success,\n                submitDisabled: success,\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const useCode = code => {\n    const [state, dispatch] = useReducer(reducer, {\n        code: code,\n        originalCode: code,\n        resetDisabled: true,\n        submitDisabled: true,\n        status: status.DEFAULT,\n    })\n\n    return [state, dispatch, types, status]\n}\n","import styled from 'styled-components'\nimport { ButtonStrip, Card } from '@dhis2/ui-core'\n\nexport const Container = styled.main`\n    flex: 1;\n`\n\nexport const StyledCard = styled(Card)`\n    display: block !important;\n    height: unset !important;\n    width: unset !important;\n    margin: 1rem;\n    padding: 1rem;\n`\n\nexport const ButtonContainer = styled(ButtonStrip)`\n    margin-top: 1rem;\n`\n","import React from 'react'\nimport { shape, string } from 'prop-types'\nimport { InputField, Button } from '@dhis2/ui-core'\nimport { useCode } from './useCode'\nimport { Container, StyledCard, ButtonContainer } from './style'\nimport { setOrgUnitCode } from '../../api'\n\nexport const Main = ({ orgUnit }) => {\n    const [state, dispatch, types, status] = useCode(orgUnit.code)\n\n    const onInput = event =>\n        dispatch({ type: types.INPUT, code: event.target.value })\n\n    const onReset = () => dispatch({ type: types.RESET })\n\n    const onSubmit = async () => {\n        dispatch({ type: types.SUBMIT })\n        const success = await setOrgUnitCode({ ...orgUnit, code: state.code })\n        dispatch({\n            type: types.UPDATE,\n            status: success ? status.VALID : status.ERROR,\n        })\n    }\n\n    return (\n        <Container>\n            <StyledCard>\n                <h1>{orgUnit.name}</h1>\n                <InputField\n                    name=\"code\"\n                    label=\"Code\"\n                    onChange={onInput}\n                    value={state.code}\n                    valid={state.status === status.VALID}\n                    error={state.status === status.ERROR}\n                    loading={state.status === status.LOADING}\n                    disabled={state.status === status.LOADING}\n                />\n                <ButtonContainer end>\n                    <Button\n                        onClick={onReset}\n                        disabled={state.resetDisabled}\n                        destructive\n                    >\n                        Reset\n                    </Button>\n                    <Button\n                        onClick={onSubmit}\n                        disabled={state.submitDisabled}\n                        primary\n                    >\n                        Submit\n                    </Button>\n                </ButtonContainer>\n            </StyledCard>\n        </Container>\n    )\n}\n\nMain.propTypes = {\n    orgUnit: shape({\n        name: string.isRequired,\n        code: string,\n    }).isRequired,\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tree } from '.'\n\nconst Container = styled.aside`\n    border-right: 1px solid rgba(0, 0, 0, 0.12);\n    background-color: #fff;\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n`\n\nconst Title = styled.h1`\n    font-size: 2rem;\n`\n\nexport const Sidebar = ({ onSelect }) => (\n    <Container>\n        <Title>OU Code</Title>\n        <Tree onSelect={onSelect} />\n    </Container>\n)\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { theme } from '@dhis2/ui-core'\n\nconst StyledSpan = styled.span`\n    display: inline-block;\n    border-radius: 3px;\n    padding: 0 5px;\n    line-height: 26px;\n    white-space: nowrap;\n    cursor: pointer;\n    user-select: none;\n    ${({ checked }) => {\n        if (checked)\n            return css`\n                background: ${theme.secondary600};\n                color: white;\n            `\n    }}\n`\n\nexport const Label = ({ id, selected, label, onChange }) => {\n    const checked = id === selected\n\n    const onClick = () => {\n        if (!checked) onChange(id)\n    }\n\n    return (\n        <StyledSpan checked={checked} onClick={onClick}>\n            {label}\n        </StyledSpan>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Node, CircularLoader } from '@dhis2/ui-core'\nimport { getOrgUnitTree } from '../api'\nimport { Label } from './Label'\n\nconst CenteredLoader = styled(CircularLoader)`\n    margin-left: auto !important;\n    margin-right: auto !important;\n`\n\nconst Element = ({\n    id,\n    displayName,\n    children,\n    selected,\n    onChange,\n    initialOpen,\n}) => {\n    const [open, setOpen] = useState(!!initialOpen)\n\n    const toggle = () => setOpen(!open)\n\n    return (\n        <Node\n            open={open}\n            onOpen={toggle}\n            onClose={toggle}\n            component={\n                <Label\n                    id={id}\n                    selected={selected}\n                    label={displayName}\n                    onChange={onChange}\n                />\n            }\n        >\n            {children.map(c => (\n                <Element\n                    key={c.id}\n                    id={c.id}\n                    selected={selected}\n                    displayName={c.displayName}\n                    children={c.children}\n                    onChange={onChange}\n                />\n            ))}\n        </Node>\n    )\n}\n\nexport const Tree = ({ onSelect }) => {\n    const [roots, setRoots] = useState(null)\n    const [selected, setSelected] = useState(null)\n\n    useEffect(() => {\n        const init = async () => {\n            const orgUnits = await getOrgUnitTree()\n            onChange(orgUnits[0].id)\n            setRoots(orgUnits)\n        }\n\n        init()\n    }, [])\n\n    const onChange = id => {\n        setSelected(id)\n        onSelect(id)\n    }\n\n    if (!roots) return <CenteredLoader />\n\n    return (\n        <section>\n            {roots.map(({ id, displayName, children }) => (\n                <Element\n                    key={id}\n                    id={id}\n                    displayName={displayName}\n                    children={children}\n                    selected={selected}\n                    onChange={onChange}\n                    initialOpen\n                />\n            ))}\n        </section>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { App } from './components'\nimport { setBaseUrl } from './api'\n\n/**\n * This is what is displayed in the header bar\n */\nconst appName = 'App Name'\n\n/**\n * Passed to DataProvider to get various data for the header bar.\n * If there is another minor release to for example 2.31.6,\n * then this variable must be updated.\n */\nconst developmentServer = 'https://play.dhis2.org/2.31.5'\n\n/**\n * Passed to DataProvider to get various data for the header bar.\n */\nconst apiVersion = 31\n\nconst rootElement = document.getElementById('root')\n\nconst productionRender = async () => {\n    try {\n        const manifest = await (await fetch('./manifest.webapp')).json()\n        render(manifest.activities.dhis.href)\n    } catch (error) {\n        console.error('Could not read manifest:', error)\n        ReactDOM.render(<code>No manifest found</code>, rootElement)\n    }\n}\n\nconst render = baseUrl => {\n    setBaseUrl(`${baseUrl}/api`)\n    ReactDOM.render(\n        <App appName={appName} baseUrl={baseUrl} apiVersion={apiVersion} />,\n        rootElement\n    )\n    serviceWorker.unregister()\n}\n\nif (process.env.NODE_ENV === 'production') productionRender()\nelse render(developmentServer)\n"],"sourceRoot":""}